#+STARTUP: indent

* docker導入
centos7.x前提

- update
#+begin_src sh
sudo yum -y update
#+end_src

- packages
#+begin_src sh
sudo yum install -y yum-utils device-mapper-persistent-data lvm2 \
  libtool-ltdl.x86_64 wget libcgroup policycoreutils-python container-selinux libseccomp
#+end_src

- docker(17.12)
  今回は17.12を選択
#+begin_src sh
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm
sudo rpm -ivh docker-*
sudo systemctl enable docker
sudo systemctl start docker
#+end_src

- docker(17.06.2)
#+begin_src sh
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.06.2.ce-1.el7.centos.x86_64.rpm
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm
sudo rpm -ivh *
sudo systemctl enable docker
#+end_src

- hostname
#+begin_src sh
sudo hostnamectl set-hostname docker2
#+end_src

- selinux
#+begin_src sh
sudo vi /etc/selinux/config # Enforcing -> Disabled
#+end_src

- reboot
#+begin_src sh
sudo reboot
#+end_src

- firewalld
#+begin_src sh
sudo systemctl stop firewalld
sudo systemctl disable firewalld
sudo iptables -nL  # 確認
#+end_src

* swarm開始

- docker01
#+begin_src sh
docker swarm init --advertise-addr=192.168.56.10 --listen-addr=0.0.0.0:2377
#+end_src

- docker infoで確認
#+begin_src sh
docker info

Swarm: active
 NodeID: 94vhdgljahay6gwn283iwa5ij
 Is Manager: true
 ClusterID: 86e5r0p1686gsccg9c57czi0m
 Managers: 1
 Nodes: 1
 Orchestration:
  Task History Retention Limit: 5
#+end_src

- docker nodeで確認
#+begin_src sh
docker node ls

ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
94vhdgljahay6gwn283iwa5ij *   docker1             Ready               Active              Leader
#+end_src

* ノードに参加
今回、workerは不要なのでmanagerとしてノードに参加する

- managerがtokenを発行
  join-token workerとするとworker用のトークンを発行する

#+begin_src sh
root@docker1# docker swarm join-token manager

To add a manager to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-04zm3gnjxxbayowef38oqvh5de835p7wrag5as6zp8if96j9e7-509t3pyfy4ajfd5go8qk5bprw \
    192.168.56.10:2377
#+end_src

- 他ホストが生成したノードに参加する
#+begin_src sh
root@docker2# docker swarm join --token SWMTKN-1-04zm3gnjxxbayowef38oqvh5de835p7wrag5as6zp8if96j9e7-509t3pyfy4ajfd5go8qk5bprw 192.168.56.10:2377
root@docker3# docker swarm join --token SWMTKN-1-04zm3gnjxxbayowef38oqvh5de835p7wrag5as6zp8if96j9e7-509t3pyfy4ajfd5go8qk5bprw 192.168.56.10:2377
#+end_src

- 確認
#+begin_src sh
root@docker1# docker node ls
ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
9r84kblc6jr4wc6g1rw52lt0t    docker3   Ready   Active        Reachable
jgechqirif3mlpscbuh0scasr    docker2   Ready   Active        Reachable
sra9s7eo2plu17m8awytb6teb *  docker1   Ready   Active        Leader
#+end_src

* sysctl.conf
- elastic-searchコンテナ起動時に発生するエラー対策
- ip_forwardingが無効になる問題

- docker01, 02, 03
#+begin_src sh
sudo echo "vm.max_map_count = 262144" >> /etc/sysctl.conf
sudo echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
#+end_src

* swarm nodeラベルを追加
replica setの各ノードがどのmanagerで実行されるのかをdocker-composeにて指定するので
ラベルを設定

** mongo
- docker01
#+begin_src sh
sudo docker node update --label-add mongo.replica.rs1=1 docker1
sudo docker node update --label-add mongo.replica.rs2=1 docker1
sudo docker node update --label-add mongo.mongos=1 docker1
#+end_src

- docker02
#+begin_src sh
sudo docker node update --label-add mongo.replica.rs1=2 docker2
sudo docker node update --label-add mongo.replica.rs2=2 docker2
sudo docker node update --label-add mongo.mongos=2 docker2
#+end_src

- docker03
#+begin_src sh
sudo docker node update --label-add mongo.replica.rs1=3 docker3
sudo docker node update --label-add mongo.replica.rs2=3 docker3
#+end_src

** swift
- docker01
#+begin_src sh
sudo docker node update --label-add swift.node=1 docker1
sudo docker node update --label-add swift.node=2 docker2
sudo docker node update --label-add swift.node=3 docker3
#+end_src

** elastic
#+begin_src sh
sudo docker node update --label-add elastic.node=1 docker1
sudo docker node update --label-add elastic.node=2 docker2
sudo docker node update --label-add elastic.node=3 docker3
#+end_src

** nodejs
#+begin_src sh
sudo docker node update --label-add nodejs.node=1 docker1
sudo docker node update --label-add nodejs.node=2 docker2
#+end_src

* stack deploy

- overlay network作成
#+begin_src sh
sudo docker network create --attachable --driver overlay walter_overlay
#+end_src

- image build
#+begin_src sh
sudo docker build ./elastic -t walter-elasticsearch:5.6
sudo docker build ./mongo -t walter-mongo:3.4.10
sudo docker build ./node -t walter-node:6.12
sudo docker build ./swift -t walter-swift
#+end_src

- deploy
#+begin_src sh
cd composes
sudo docker stack deploy walter --compose-file docker-compose.yml
#+end_src

* mongo初期設定
** rs1, rs2の初期化
- docker01
#+begin_src sh
sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_mongocfg_rs1_1) \
  mongo --port 27017 /rs_inits/rs1-init.js

sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_mongosrd_rs2_1) \
  mongo --port 27017 /rs_inits/rs2-init.js
#+end_src

** mongos
暫くしてから実行する

- docker01
#+begin_src sh
sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_mongos_1) \
  mongo --port 27017 /rs_inits/mongos01-init.js
#+end_src

- docker02
#+begin_src sh
sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_mongos_2) \
  mongo --port 27017 /rs_inits/mongos02-init.js
#+end_src

** 初期データ投入

- docker01
#+begin_src sh
git pull origin develop

sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_mongos_1) \
  mongo localhost/walter /webapp/server/jobs/loadTestData.js
#+end_src

* swift初期設定
** ring作成

- docker01, 02, 03にて実行する
  環境変数に注意する
#+begin_src sh
sudo docker exec -it -e docker01=192.168.56.10 -e docker02=192.168.56.11 -e docker03=192.168.56.12 \
$(docker ps -qf label=com.docker.swarm.service.name=walter_swift_01) \
bash /ring-inits/ring_create.sh

#+end_src

** container stop, start

** 初期swiftコンテナ作成
- docker01
#+begin_src sh
sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_swift_01) \
  swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing post walter
#+end_src

- 削除する場合
#+begin_src sh
sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_swift_01) \
  swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing delete --all
#+end_src

* elastic search初期設定
#+begin_src sh
sudo docker exec -it $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_nodejs_01) \
  /bin/bash -c "cd /webapp/walter-02/server && npm run init-elasticsearch test"
#+end_src

* nginx構築、設定

- add repository
#+begin_src sh
sudo su

cat << EOF > /etc/yum.repos.d/nginx.repo
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/mainline/centos/7/\$basearch/
gpgcheck=0
enabled=1
EOF
#+end_src

- install
#+begin_src sh
sudo yum install -y nginx
sudo systemctl enable nginx
sudo systemctl start nginx
#+end_src

- /etc/nginx/nginx.conf
#+begin_src conf
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;

    upstream backend {
        server 10.30.88.74:3000;
        #server 10.30.88.75:3001 backup;
    }

    server {
        listen 80;
        server_name cloud-storage;
        client_max_body_size 100m;

        location /test {
            proxy_pass http://backend;
        }

        location / {
            proxy_pass http://backend;
        }
    }
}
#+end_src

* keepalived

- install
#+begin_src sh
sudo yum install -y keepalived
sudo systemctl start keepalived
sudo systemctl enable keepalived
#+end_src

- kernel setting
#+begin_src sh
echo "net.ipv4.ip_nonlocal_bind = 1" >> /etc/sysctl.conf
#+end_src

- keepalived.conf
#+begin_src conf
global_defs {
  router_id walter_devel
}

vrrp_sync_group vg1 {
  group {
    external
    internal
  }
}

vrrp_script chk_proxy {
  script "/usr/bin/systemctl status nginx.service"
  interval 2
  fail 3
  rise 2
}

vrrp_instance external {
  state BACKUP
  interface enp0s8
  virtual_router_id 50
  priority 200
  advert_int 1

  authentication {
    auth_type PASS
    auth_pass password123
  }

  virtual_ipaddress {
    192.168.56.20/24 brd 192.168.56.255 dev enp0s8
  }

  track_script {
    chk_proxy
  }

  preempt_delay 300

}

vrrp_instance internal {
  state BACKUP
  interface enp0s9
  virtual_router_id 2
  priority 200
  advert_int 1

  authentication {
    auth_type PASS
    auth_pass password123
  }

  virtual_ipaddress {
    192.168.57.20/24 brd 192.168.57.255 dev enp0s9
  }

  track_script {
    chk_proxy
  }

  preempt_delay 300
}
#+end_src

* メモ
** overlay networkに使い捨てコンテナを接続しメンテしたいとき
#+begin_src sh
sudo docker run -it --rm --network=walter_overlay walter-ubuntu:16.04 /bin/bash
#+end_src

** nodejs deploy
本番とは別のdocker環境で実行する
  
- image作成、save
#+begin_src sh
sudo docker run -it --name walter-node-tmp walter-node:6.12 bash
cd /webapp/walter-02
git pull origin develop
cd server
npm install
npm run build
cd ../client
npm install
npm run build
exit

docker commit walter-node-tmp walter-node:6.12
docker save walter-node:6.12 > walter-node_6.12.tar
docker stop walter-node-tmp
docker rm walter-node-tmp
#+end_src

- image load
  本番サーバ上で実行する

#+begin_src sh
docker load < walter-node_6.12.tar
docker stop $(sudo docker ps -qf label=com.docker.swarm.service.name=walter_nodejs_01)
#+end_src
