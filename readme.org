#+STARTUP: indent

* docker導入
centos7.x前提

- update
#+begin_src sh
sudo yum -y update
#+end_src

- packages
#+begin_src sh
sudo yum install -y yum-utils device-mapper-persistent-data lvm2 \
  libtool-ltdl.x86_64 wget libcgroup policycoreutils-python container-selinux libseccomp
#+end_src

- docker
#+begin_src sh
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.06.2.ce-1.el7.centos.x86_64.rpm
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm
sudo rpm -ivh *
sudo systemctl enable docker
#+end_src

- hostname

#+begin_src sh
sudo hostnamectl set-hostname docker2
#+end_src

- selinux
#+begin_src sh
sudo vi /etc/selinux/config # Enforcing -> Disabled
#+end_src

- reboot

#+begin_src sh
sudo reboot
#+end_src

- firewalld
#+begin_src sh
sudo systemctl stop firewalld
sudo systemctl disable firewalld
sudo iptables -nL  # 確認
#+end_src

* swarm開始

#+begin_src sh
root@docker1# docker swarm init --advertise-addr=192.168.56.10 --listen-addr=0.0.0.0:2377
#+end_src

- docker infoで確認
#+begin_src sh
root@docker1# docker info
Swarm: active
 NodeID: 94vhdgljahay6gwn283iwa5ij
 Is Manager: true
 ClusterID: 86e5r0p1686gsccg9c57czi0m
 Managers: 1
 Nodes: 1
 Orchestration:
  Task History Retention Limit: 5
#+end_src

- docker nodeで確認
#+begin_src sh
root@docker1# docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
94vhdgljahay6gwn283iwa5ij *   docker1             Ready               Active              Leader
#+end_src

* ノードに参加
今回、workerは不要なのでmanagerとしてノードに参加する

- managerがtokenを発行
  join-token workerとするとworker用のトークンを発行する

#+begin_src sh
root@docker1# docker swarm join-token manager

To add a manager to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-04zm3gnjxxbayowef38oqvh5de835p7wrag5as6zp8if96j9e7-509t3pyfy4ajfd5go8qk5bprw \
    192.168.56.10:2377
#+end_src

- 他ホストが生成したノードに参加する
#+begin_src sh
root@docker2# docker swarm join --token SWMTKN-1-04zm3gnjxxbayowef38oqvh5de835p7wrag5as6zp8if96j9e7-509t3pyfy4ajfd5go8qk5bprw 192.168.56.10:2377
root@docker3# docker swarm join --token SWMTKN-1-04zm3gnjxxbayowef38oqvh5de835p7wrag5as6zp8if96j9e7-509t3pyfy4ajfd5go8qk5bprw 192.168.56.10:2377
#+end_src

- 確認
#+begin_src sh
root@docker1# docker node ls
ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
9r84kblc6jr4wc6g1rw52lt0t    docker3   Ready   Active        Reachable
jgechqirif3mlpscbuh0scasr    docker2   Ready   Active        Reachable
sra9s7eo2plu17m8awytb6teb *  docker1   Ready   Active        Leader
#+end_src

* sysctl.conf
- elastic-searchコンテナ起動時に発生するエラー対策

- docker01, 02, 03
#+begin_src sh
sudo docker logs elastic_xx
ERROR: [2] bootstrap checks failed
[1]: memory locking requested for elasticsearch process but memory is not locked
[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]

sudo echo "vm.max_map_count = 262144" >> /etc/sysctl.conf
#+end_src

* swarm nodeラベルを追加
replica setの各ノードがどのmanagerで実行されるのかをdocker-composeにて指定するので
ラベルを設定

** mongo
- docker01
#+begin_src sh
sudo docker node update --label-add mongo.replica.rs1=1 docker1
sudo docker node update --label-add mongo.replica.rs2=1 docker1
sudo docker node update --label-add mongo.mongos=1 docker1
#+end_src

- docker02
#+begin_src sh
sudo docker node update --label-add mongo.replica.rs1=2 docker2
sudo docker node update --label-add mongo.replica.rs2=2 docker2
sudo docker node update --label-add mongo.mongos=2 docker2
#+end_src

- docker03
#+begin_src sh
sudo docker node update --label-add mongo.replica.rs1=3 docker3
sudo docker node update --label-add mongo.replica.rs2=3 docker3
#+end_src

** swift
- docker01
#+begin_src sh
sudo docker node update --label-add swift.node=1 docker1
sudo docker node update --label-add swift.node=2 docker2
sudo docker node update --label-add swift.node=3 docker3
#+end_src

** elastic
#+begin_src sh
sudo docker node update --label-add elastic.node=1 docker1
sudo docker node update --label-add elastic.node=2 docker2
#+end_src

** nodejs
#+begin_src sh
sudo docker node update --label-add nodejs.node=1 docker1
sudo docker node update --label-add nodejs.node=2 docker2
#+end_src

* stack deploy

- overlay network作成
#+begin_src sh
docker network create --attachable --driver overlay walter_overlay
#+end_src

- deploy
#+begin_src sh
cd composes
sudo docker stack deploy walter --compose-file docker-compose.yml
#+end_src

* mongo初期設定
** rs1, rs2の初期化
- docker01
#+begin_src sh
sudo docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongocfg_rs1_1) \
  mongo --port 27017 /rs_inits/rs1-init.js

sudo docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongosrd_rs2_1) \
  mongo --port 27017 /rs_inits/rs2-init.js
#+end_src

** mongos
暫くしてから実行する

- docker01
#+begin_src sh
sudo docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongos_1) \
  mongo --port 27017 /rs_inits/mongos01-init.js
#+end_src

- docker02
#+begin_src sh
sudo docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongos_2) \
  mongo --port 27017 /rs_inits/mongos02-init.js
#+end_src

** 初期データ投入

- docker01
#+begin_src sh
sudo docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongos_1) \
  mongo localhost/walter /webapp/server/jobs/loadTestData.js
#+end_src

* swift初期設定
** 事前準備として各ノードにvolume作成

- docker01
#+begin_src sh
sudo docker volume create --name swift_tmp
#+end_src

** ring作成

- docker01
#+begin_src sh
sudo docker run --rm -it -v swift_tmp:/srv -v /root/composes/swift/ring-inits:/ring-inits \
  morrisjobke/docker-swift-onlyone \
  bash ./ring-inits/ring_create.sh
#+end_src

** ring配布

- docker01
#+begin_src sh
cp -r /var/lib/docker/volumes/swift_tmp/_data/* /var/lib/docker/volumes/walter_swift_01/_data/
#+end_src

- docker02
#+begin_src sh
scp -r root@192.168.56.10:/var/lib/docker/volumes/swift_tmp/_data/* /var/lib/docker/volumes/walter_swift_02/_data/
#+end_src

- docker03
#+begin_src sh
scp -r root@192.168.56.10:/var/lib/docker/volumes/swift_tmp/_data/* /var/lib/docker/volumes/walter_swift_03/_data/
#+end_src


** 初期コンテナ作成
- docker01
#+begin_src sh
docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_swift_01) \
  swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing post walter
#+end_src

* nodejs初期設定

- git pull, npm install
#+begin_src sh
docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_nodejs_01) \
  /bin/bash
cd /webapp/walter-02/server
npm install
cd ../client
npm install
#+end_src

* elastic search初期設定
#+begin_src sh
npm run init-elasticsearch
#+end_src

* mongo初期設定
#+begin_src sh
mongo localhost/walter loadTestData.js
#+end_src

* stack再起動
#+begin_src sh
docker stack rm walter
docker stack deploy walter --compose-file docker-compose.yml
#+end_src

* 動作確認
** mongo
#+begin_src sh
docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongocfg_rs1_1) \
  mongo --port 27017

docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongosrd_rs2_1) \
  mongo --port 27017

docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_mongos_1) \
  mongo --port 27017
#+end_src

** swift
#+begin_src sh
docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_swift_01) \
  swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing stat walter
#+end_src

** elastic
#+begin_src sh
docker exec -it $(docker ps -qf label=com.docker.swarm.service.name=walter_elastic_01) \
  curl -X get http://localhost:9200/_cluster/state
#+end_src

** nodejs
docker-composeのdepends_onがswarmでは無視されるのでdocker stopで凌ぐ...
* メモ

- overlay networkに使い捨てコンテナを接続しメンテしたいとき
#+begin_src sh
docker run -it --rm --network=walter_overlay walter-ubuntu:16.04 /bin/bash
#+end_src

